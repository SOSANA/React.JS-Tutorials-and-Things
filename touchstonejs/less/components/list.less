// 
// List
// ==============================

// item

.list-item {
	.display-flex();
	color: @item-color;
	// line-height: @font-size-base + 3;
	line-height: 1;
	// overflow: hidden;
	position: relative;
	z-index: 1;

	// create the ios-style gap on the left
	padding-left: @padding-base-horizontal;

	// stop changes on various states when developing on desktop
	&:hover,
	&:active,
	&:focus {
		color: @item-color;
		text-decoration: none;
	}

	// add active state

	&.Tappable-active {
		.transition( background-color 10ms linear 10ms ); // delay the tap highlight, it may just be a scroll
		background-color: @item-tap-bg;
	}

	// transition in and out of tap bg highlight
	&.Tappable-inactive {
		.transition( background-color 200ms );
	}
}

// provide the little arrow indicating a view will be shown on tap

.list-item.is-tappable:after {
	.pseudo-ionicon(#ccc, @ionicon-var-chevron-right, @ionicons-size-base);
	.align-items(center);
	.display-flex();
	height: 100%;
	position: absolute;
	right: @padding-base-horizontal;
	top: 0;
}

// align the interior

.item-inner {
	.display-flex();
	.align-items(center);
	.justify-content(space-between);
	.retina-1px-border-bottom(@item-divider-color);
	// border-bottom: 1px solid @item-divider-color;
	min-height: @item-height;
	padding: @field-padding-vertical @field-padding-horizontal @field-padding-vertical 0;
	width: 100%;

	// alternative alignment (applied to the "list-item")
	.align-children-top > & {
		.align-items(flex-start);
	}
	.align-children-bottom > & {
		.align-items(flex-end);
	}

	// hide the last item's border
	.list-item:last-child & {
		border-bottom: none;
	}

	// force borders when desired
	.list-item.has-border-bottom & {
		border-bottom: 1px solid @item-divider-color;
	}
	.list-item.has-border-top & {
		border-top: 1px solid @item-divider-color;
	}

	// add gap between media and content
	.item-media + & {
		margin-left: @field-padding-horizontal;
	}

	// enforce border when explicitly defined
	.list-item.has-border-bottom & {
		.retina-1px-border-bottom(@item-divider-color);
	}
	.list-item.has-border-top & {
		.retina-1px-border-top(@item-divider-color);
	}
}

// wrap item content so text cropping works

.item-content {
	.flex(1, 0, 0);

	&.row-children {
		.display-flex();
	}
}

// text

.item-title {
	.text-overflow();

	// make room for descenders to stop the being cropped
	margin-bottom: -1px;
	padding-bottom: 1px;
}
.item-subtitle {
	.text-overflow();
	color: @gray;
	font-size: 85%;
	font-weight: 300;
	
	// make room for descenders to stop the being cropped
	margin-bottom: -1px;
	padding-bottom: 1px;
}

// center align elements

.center-align-left,
.center-align-right {
	.display-flex();
	.align-items(center);
	height: 100%;
	position: absolute;
	top: 0;
}
.center-align-left {
	left: @padding-base-horizontal;
}
.center-align-right {
	right: @padding-base-horizontal;
}

// Item Notes
// ------------------------------

.item-note {
	.display-flex();
	white-space: nowrap;

	// variants
	&.default {
		color: #999;
		
		.item-note-icon {
			color: #ccc;
		}
	}
	&.primary { color: @app-primary; }
	&.dark { color: @text-color; }

}

// one line
.item-note-label {
	white-space: nowrap;
}

// provide some space for the icon and get the size right
.item-note-icon {
	margin-left: (@padding-base-horizontal / 2);

	&:before {
		font-size: @ionicons-size-base;
	}
}

// Item Media
// ------------------------------

.item-media {
	.display-flex();
	.flex-wrap(nowrap);
	.align-items(center);

	&.is-avatar    { .square(@item-avatar-size); }
	&.is-icon      { width: @item-icon-size; }
	&.is-thumbnail { .square(@item-thumbnail-size); }
}

// Icons

.item-icon {
	.inline-align();
	.square(@item-icon-size);
	border-radius: @border-radius-base;
	line-height: @item-icon-size;
	text-align: center;

	// actual icon

	&:before {
		.display-flex();
		.align-items(center);
		.justify-content(center);
		font-size: @ionicons-size-large;
		height: 100%;
	}

	// align left
	&.left {
		left: @padding-base-horizontal;

		&.flush {
			left: 0;			
		}
	}
	// align right
	&.right {
		right: @padding-base-horizontal;

		&.flush {
			right: 0;			
		}
	}

	// add a box around the icon
	&.rounded {
		border-radius: @border-radius-base;
		background-color: @body-bg;
	}
}

// icon variants

.item-icon.primary-inverted {
	background-color: @app-primary;
	color: white;
}
.item-icon.primary {
	color: @app-primary;
}
.item-icon.default {
	background-color: @body-bg;
	color: @text-color;
}

// loading

.item-icon.ion-load-a:before,
.item-icon.ion-load-b:before,
.item-icon.ion-load-c:before,
.item-icon.ion-load-d:before {
	.animation( spin 1s linear infinite );
}

// Avatars
// ------------------------------

.list-avatar, // deprecated, remove in next major version
.item-avatar {
	.inline-align();
	.square(@item-avatar-size);
	.translateY(-50%);
	background-color: mix(white, black, 70%);
	border-radius: 50%;
	color: white;
	font-size: @ionicons-size-large;
	line-height: @item-avatar-size;
	left: @padding-base-horizontal;
	position: absolute;
	text-align: center;
	top: 50%;

	> img {
		.square(100%);
		border-radius: 50%;
		display: block;
		height: auto;
	}
}

// Thumbnails
// ------------------------------

.item-thumbnail {
	.square(@item-thumbnail-size);
	margin-top: @padding-base-vertical;

	> img {
		border-radius: @border-radius-base;
		display: block;
		height: auto;
		max-width: 100%;
	}
}

// Headers
// ------------------------------

.list-header {
	.retina-1px-border-top-and-bottom( @item-divider-color );
	background-color: @body-bg;
	color: @panel-header-color;
	display: block;
	font-size: @font-size-tiny;
	font-weight: @font-weight-bold;
	line-height: 1.1;
	margin: 0;
	padding: (@padding-base-vertical / 2) @padding-base-horizontal;
	position: relative; // fallback
	text-transform: uppercase;
	z-index: 2;

	// sticky option
	&.sticky {
		position: -webkit-sticky;
		top: 0;
	}
}

